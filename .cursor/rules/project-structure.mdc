# University Library App - Project Structure

This is an Expo React Native application for a university library that displays books and videos to students.

## Project Architecture

### Core Technologies
- **Expo Router**: File-based routing system
- **React Native Gesture Handler**: Preferred over React Native for gesture components
- **TanStack Query**: For data fetching and caching
- **React Hook Form**: For form management
- **typesafe-i18n**: For internationalization
- **ky**: For HTTP requests (instead of axios)
- **Atomic Design**: Component architecture with primitives in `kits` folder

### Directory Structure
```
src/
├── app/                    # Expo Router pages
├── kits/                   # Atomic design primitives
│   ├── atoms/             # Basic building blocks
│   ├── molecules/         # Simple combinations
│   ├── organisms/         # Complex UI components
│   └── templates/         # Page layouts
├── features/              # Feature-based organization
│   ├── books/            # Book-related features
│   ├── videos/           # Video-related features
│   ├── auth/             # Authentication
│   └── profile/          # User profile
├── shared/               # Shared utilities and components
│   ├── hooks/           # Custom React hooks
│   ├── utils/           # Utility functions
│   ├── constants/       # App constants
│   └── types/           # TypeScript type definitions
├── i18n/                # Internationalization
│   ├── locales/         # Translation files
│   └── formatters/      # Date/number formatters
└── theme/               # Theme configuration
    ├── light.ts         # Light theme
    ├── dark.ts          # Dark theme
    └── index.ts         # Theme exports
```

### Key Files
- [package.json](mdc:package.json): Project dependencies and scripts
- [app.config.ts](mdc:app.config.ts): Expo configuration
- [tsconfig.json](mdc:tsconfig.json): TypeScript configuration
- [src/app/_layout.tsx](mdc:src/app/_layout.tsx): Root layout component
- [src/app/index.tsx](mdc:src/app/index.tsx): Home page

### Development Guidelines
1. Use feature-based folder structure for scalability
2. Implement atomic design principles with components in `kits`
3. Follow conventional commits specification for version control
4. Support both light and dark themes
5. Implement multi-language support with typesafe-i18n
6. Use TanStack Query for all data fetching operations
7. Prefer react-native-gesture-handler over react-native components
8. Use ky for HTTP requests instead of axios
description:
globs:
alwaysApply: true
---
